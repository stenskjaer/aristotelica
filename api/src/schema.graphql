type Text {
  id: ID! 
  created: DateTime!
  modified: DateTime
  authors: [Person!]! @cypher(statement: "MATCH (this)<--(:Attribution)-->(p:Person) RETURN DISTINCT p")
  attributions: [Attribution!]! @relation(name: "OF", direction: "IN")
  title: String
  title_addon: String
  date: String
  note: String
  incipit: String
  explicit: String
  datings: [Dating!]! @relation(name: "OF", direction: "IN")
  types: [TextType]! @relation(name: "Type", direction: "OUT")
}

type TextType {
  id: ID!
  name: String!
  parent: TextType @relation(name: "HAS_CHILD", direction: "IN")
  children: [TextType] @relation(name: "HAS_CHILD", direction: "OUT")
}

type Person {
  id: ID!
  name: String!
  name_en: String
  name_la: String
  created: String!
  modified: String
  note: String 
}

type Date {
  id: ID!
  type: DateType!
  dating: Dating! @relation(name: "OF", direction: "IN")
  approximate: Boolean
  uncertain: Boolean
  edtf: String
  year: Year @relation(name: "BELONGS_TO", direction: "OUT")
  month: Month @relation(name: "BELONGS_TO", direction: "OUT")
  day: Day @relation(name: "BELONGS_TO", direction: "OUT")
}

enum DateType {
  START
  END
  SINGLE
}

type Dating {
  id: ID!
  source: String
  note: String
  dates: [Date!]! @relation(name: "TO", direction: "OUT")
  text: Text @relation(name: "OF", direction: "OUT")
}

type Year {
  id: ID!
  value: Int!
  months: [Month!]! @relation(name: "CONTAINS", direction: "OUT")
}

type Month {
  id: ID!
  value: Int!
  year: Year! @relation(name: "CONTAINS", direction: "IN")
  days: [Day!]! @relation(name: "CONTAINS", direction: "OUT")
}

type Day {
  id: ID!
  value: Int!
  month: Month! @relation(name: "CONTAINS", direction: "IN")
}

type Attribution {
  id: ID!
  text: Text @relation(name: "OF", direction: "OUT")
  person: Person @relation(name: "TO", direction: "OUT")
  note: String
  source: String
  certainty: AttributionCertainty
}

enum AttributionCertainty {
  CERTAIN
  POSSIBLE
  DUBIOUS
  FALSE
}

scalar DateTime

type Query {
  Attribution(id: ID): Attribution
  personNameSubstring(substring: String!): [Person!]! @cypher(
    statement: "MATCH (p:Person) WHERE lower(p.name) CONTAINS lower({substring}) RETURN p ORDER BY p.name"
  )
  textByTitle(substring: String): [Text] @cypher(statement: "MATCH (t:Text) WHERE lower(t.title) CONTAINS lower($substring) RETURN t")
  textById(id: String!): Text @cypher(statement: "MATCH (t:Text) WHERE t.id = $id RETURN t")
}

type Mutation {
  UpdateText(
      id: ID!, 
      modified: DateTime,
      title: String,
      title_addon: String,
      note: String,
      incipit: String,
      explicit: String,
      date: String,
  ): Text

  CreateTextAttribution(
    id: ID!,
    textid: ID!,
    personid: ID!,
    note: String,
    source: String,
    certainty: AttributionCertainty
  ): Attribution @cypher(
    statement: 
    "MATCH (t:Text {id: {textid}}), (p:Person {id:{personid}}) MERGE (t)<-[:OF]-(a:Attribution {id: {id}})-[:TO]->(p) RETURN a"
    )
}