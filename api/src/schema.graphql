type Text {
  id: ID! 
  created: DateTime!
  modified: DateTime
  authors: [Person!]! @cypher(statement: "MATCH (this)<--(:Attribution)-->(p:Person) RETURN DISTINCT p")
  attributions: [Attribution!]! @relation(name: "OF", direction: "IN")
  title: String
  title_addon: String
  date: String
  note: String
  types: [TextType]! @relation(name: "Type", direction: "OUT")
}

type Person {
  id: ID!
  name: String!
  created: String!
  modified: String
  note: String 
}

type Attribution {
  id: ID!
  text: Text @relation(name: "OF", direction: "OUT")
  person: Person @relation(name: "TO", direction: "OUT")
  note: String
  source: String
  certainty: AttributionCertainty
}

enum AttributionCertainty {
  CERTAIN
  POSSIBLE
  DUBIOUS
  FALSE
}

type TextType {
  id: ID!
  name: String!
  parent: TextType @relation(name: "HAS_CHILD", direction: "IN")
  children: [TextType] @relation(name: "HAS_CHILD", direction: "OUT")
}

scalar DateTime

type Query {
  Attribution(id: ID): Attribution
  textByTitle(substring: String): [Text] @cypher(statement: "MATCH (t:Text) WHERE lower(t.title) CONTAINS lower($substring) RETURN t")
  textById(id: String!): Text @cypher(statement: "MATCH (t:Text) WHERE t.id = $id RETURN t")
}

type Mutation {
  UpdateText(
      id: ID!, 
      modified: DateTime,
      title: String,
      title_addon: String,
      note: String,
      date: String,
    ): Text
  CreateTextAttribution(
    id: ID!,
    textid: ID!,
    personid: ID!,
    note: String,
    source: String,
    certainty: AttributionCertainty
  ): Attribution @cypher(
    statement: 
    "MATCH (t:Text {id: {textid}}), (p:Person {id:{personid}}) MERGE (t)<-[:OF]-(a:Attribution {id: {id}})-[:TO]->(p) RETURN a"
    )
}